<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yemaster&#39;s Blog</title>
  
  <subtitle>技术萌新，边学边写</subtitle>
  <link href="https://blog.yemaster.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.yemaster.cn/"/>
  <updated>2023-12-11T04:43:01.399Z</updated>
  <id>https://blog.yemaster.cn/</id>
  
  <author>
    <name>yemaster</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单麻将bot示例</title>
    <link href="https://blog.yemaster.cn/mahjong-bot/"/>
    <id>https://blog.yemaster.cn/mahjong-bot/</id>
    <published>2023-12-11T04:26:00.000Z</published>
    <updated>2023-12-11T04:43:01.399Z</updated>
    
    <content type="html"><![CDATA[<p>在上篇文章中，我们简单介绍了一些胡牌算法的实现。现在，我们根据这个实现，编写对应的简单的胡牌机器人。</p><p>关于七对子和碎胡的机器人的编写非常容易，因此本文将着重阐述顺胡的AI算法编写。</p><p>类似胡牌算法，我们依旧将牌分成4个部分：万筒条和字牌。为了简单，我们不考虑龙的情况。接着，根据当前牌型和牌堆中剩余的牌，计算出胡牌的概率。然后每次打牌就打出打出之后胡牌概率最大的牌即可。</p><h3 id="胡牌概率的计算"><a class="markdownIt-Anchor" href="#胡牌概率的计算"></a> 胡牌概率的计算</h3><p>分别对每一部分进行考虑。首先预处理出所有可以胡牌的牌型。由于整副牌只有1个对子，所以要分别处理有对子和没对子的情况。这一步直接用dfs先生成所有可能的牌型，然后暴力判断就可以了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">allPaiSets = []</span><br><span class="line">nowPaiSet = [0 for i in range(9)]</span><br><span class="line"></span><br><span class="line">def factorial(n: int) -&gt; int:</span><br><span class="line">    d = 1</span><br><span class="line">    for i in range(1, n + 1):</span><br><span class="line">        d *= i</span><br><span class="line">    return d</span><br><span class="line"></span><br><span class="line">def binomial(n: int, m: int) -&gt; int:</span><br><span class="line">    return factorial(n) // factorial(m) // factorial(n - m)</span><br><span class="line"></span><br><span class="line">def permutation(n: int, m: int) -&gt; int:</span><br><span class="line">    d = 1</span><br><span class="line">    for i in range(n, n - m, -1):</span><br><span class="line">        d *= i</span><br><span class="line">    return d</span><br><span class="line"></span><br><span class="line">def genAllSets(u: int, num: int) -&gt; None:</span><br><span class="line">    global allPaiSets, nowPaiSet</span><br><span class="line">    if u &gt;= 9:</span><br><span class="line">        allPaiSets.append(nowPaiSet.copy())</span><br><span class="line">        return</span><br><span class="line">    for i in range(5):</span><br><span class="line">        if num + i &gt;= 14:</span><br><span class="line">            break</span><br><span class="line">        nowPaiSet[u] = i</span><br><span class="line">        genAllSets(u + 1, num + i)</span><br><span class="line"></span><br><span class="line">allHuSets1 = [] # No Pairs</span><br><span class="line">allHuSets2 = [] # 1 Pair</span><br><span class="line"></span><br><span class="line">def judgeSet(pair: bool) -&gt; bool:</span><br><span class="line">    global nowPaiSet</span><br><span class="line">    if sum(nowPaiSet) == 0:</span><br><span class="line">        return not pair</span><br><span class="line">    pos = 0</span><br><span class="line">    for i in range(len(nowPaiSet)):</span><br><span class="line">        if nowPaiSet[i] &gt; 0:</span><br><span class="line">            pos = i</span><br><span class="line">            break</span><br><span class="line">    flag = False</span><br><span class="line">    if nowPaiSet[pos] &gt;= 2 and pair:</span><br><span class="line">        nowPaiSet[pos] -= 2</span><br><span class="line">        flag = flag or judgeSet(False)</span><br><span class="line">        nowPaiSet[pos] += 2</span><br><span class="line">    if nowPaiSet[pos] &gt;= 3:</span><br><span class="line">        nowPaiSet[pos] -= 3</span><br><span class="line">        flag = flag or judgeSet(pair)</span><br><span class="line">        nowPaiSet[pos] += 3</span><br><span class="line">    if pos &lt;= 6 and nowPaiSet[pos] &gt;= 1 and nowPaiSet[pos + 1] &gt;= 1 and nowPaiSet[pos + 2] &gt;= 1:</span><br><span class="line">        nowPaiSet[pos] -= 1</span><br><span class="line">        nowPaiSet[pos + 1] -= 1</span><br><span class="line">        nowPaiSet[pos + 2] -= 1</span><br><span class="line">        flag = flag or judgeSet(pair)</span><br><span class="line">        nowPaiSet[pos] += 1</span><br><span class="line">        nowPaiSet[pos + 1] += 1</span><br><span class="line">        nowPaiSet[pos + 2] += 1</span><br><span class="line">    return flag</span><br><span class="line"></span><br><span class="line">def getAllHuSets() -&gt; None:</span><br><span class="line">    global nowPaiSet</span><br><span class="line">    for s in allPaiSets:</span><br><span class="line">        nowPaiSet = s.copy()</span><br><span class="line">        if judgeSet(False):</span><br><span class="line">            allHuSets1.append(s.copy())</span><br><span class="line">        nowPaiSet = s.copy()</span><br><span class="line">        if judgeSet(True):</span><br><span class="line">            allHuSets2.append(s.copy())</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    genAllSets(0, 0)</span><br><span class="line">    getAllHuSets()</span><br><span class="line">    with open(&quot;sets1.txt&quot;, &quot;w&quot;) as f:</span><br><span class="line">        for i in allHuSets1:</span><br><span class="line">            f.write(&quot;&quot;.join([str(l) for l in i])+&quot;\n&quot;)</span><br><span class="line">    with open(&quot;sets2.txt&quot;, &quot;w&quot;) as f:</span><br><span class="line">        for i in allHuSets2:</span><br><span class="line">            f.write(&quot;&quot;.join([str(l) for l in i])+&quot;\n&quot;)</span><br></pre></td></tr></table></figure><p>字牌的处理是类似的，因此这里不再展示。</p><p>处理出这个表之后，我们只要把当前牌型跟所有牌型一一进行比较，计算出到达这一牌型的的概率，最后取最大值就可以了：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> multier 100.0</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> huSet1[<span class="number">8023</span>][<span class="number">20</span>], huSet2[<span class="number">8023</span>][<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> wordSet1[<span class="number">300</span>][<span class="number">20</span>], wordSet2[<span class="number">300</span>][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">factorial</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> res = (<span class="type">long</span> <span class="type">double</span>)(<span class="number">1.0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        res *= i;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">C</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> res = (<span class="type">long</span> <span class="type">double</span>)(<span class="number">1.0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        res = res * (i + n - m) / i;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">P</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> res = (<span class="type">long</span> <span class="type">double</span>)(<span class="number">1.0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        res = res * (i + n - m);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *f1, *f2;</span><br><span class="line">    <span class="comment">// 读取所有的文件</span></span><br><span class="line">    f1 = <span class="built_in">fopen</span>(<span class="string">&quot;sets1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">int</span> cnt1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((ch = <span class="built_in">fgetc</span>(f1)) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt1++;</span><br><span class="line">            pos = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            huSet1[cnt1][pos++] = ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fclose</span>(f1);</span><br><span class="line">    <span class="comment">// 读取sets2.txt,words1.txt,words2.txt，代码略</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> last[<span class="number">35</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">34</span>; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;last[i]); <span class="comment">// 读取34种牌每种牌还剩几张。</span></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">34</span>; ++i)</span><br><span class="line">        sum += last[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cardLen = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> myCard[<span class="number">15</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;cardLen); <span class="comment">// 读取当前手牌的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> T = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cardLen; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;myCard[i]);</span><br><span class="line">        <span class="type">int</span> parts[<span class="number">5</span>][<span class="number">12</span>];</span><br><span class="line">        <span class="built_in">memset</span>(parts, <span class="number">0</span>, <span class="built_in">sizeof</span>(parts));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cardLen; ++i)</span><br><span class="line">            parts[myCard[i] / <span class="number">9</span>][myCard[i] % <span class="number">9</span>]++;</span><br><span class="line">        <span class="type">long</span> <span class="type">double</span> prob[<span class="number">8</span>][<span class="number">14</span>][<span class="number">14</span>];</span><br><span class="line">        <span class="built_in">memset</span>(prob, <span class="number">0</span>, <span class="built_in">sizeof</span>(prob));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 计算没对子情况时的概率</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; cnt1; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="type">int</span> need[<span class="number">9</span>];</span><br><span class="line">                <span class="type">int</span> need_sum = <span class="number">0</span>;</span><br><span class="line">                <span class="type">int</span> more[<span class="number">9</span>];</span><br><span class="line">                <span class="type">int</span> more_sum = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">memset</span>(need, <span class="number">0</span>, <span class="built_in">sizeof</span>(need)); <span class="comment">// 记录每张牌还差多少或者多了多少</span></span><br><span class="line">                <span class="built_in">memset</span>(more, <span class="number">0</span>, <span class="built_in">sizeof</span>(more));</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">9</span>; ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parts[i][k] &gt; huSet1[j][k])</span><br><span class="line">                        more[k] = parts[i][k] - huSet1[j][k];</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        need[k] = huSet1[j][k] - parts[i][k];</span><br><span class="line">                        <span class="keyword">if</span> (need[k] &gt; last[i * <span class="number">9</span> + k])</span><br><span class="line">                        &#123;</span><br><span class="line">                            flag = <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    need_sum += need[k];</span><br><span class="line">                    more_sum += more[k];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">long</span> <span class="type">double</span> p = (<span class="type">long</span> <span class="type">double</span>)(multier);</span><br><span class="line">                <span class="type">int</span> tmp = need_sum;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">9</span>; ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!need[k])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    p *= <span class="built_in">C</span>(need_sum, need[k]);</span><br><span class="line">                    p *= <span class="built_in">P</span>(last[i * <span class="number">9</span> + k], need[k]);</span><br><span class="line">                    need_sum -= need[k];</span><br><span class="line">                &#125;</span><br><span class="line">                p /= <span class="built_in">P</span>(sum, tmp);</span><br><span class="line">                prob[i &lt;&lt; <span class="number">1</span>][tmp][more_sum] = <span class="built_in">max</span>(prob[i &lt;&lt; <span class="number">1</span>][tmp][more_sum], p);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 有对子的情况，代码雷同，略</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 字牌的处理情况与上面雷同，略</span></span><br><span class="line">        <span class="type">long</span> <span class="type">double</span> maxP = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 用7重循环，分别枚举每一种牌的进几张出几张，并枚举对子在那里</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i1 = <span class="number">0</span>; i1 &lt;= <span class="number">14</span>; ++i1)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i2 = <span class="number">0</span>; i2 &lt;= <span class="number">14</span>; ++i2)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i3 = <span class="number">0</span>; i3 &lt;= <span class="number">14</span>; ++i3)</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i4 = <span class="number">0</span>; i4 &lt;= <span class="number">14</span>; ++i4)</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> i5 = <span class="number">0</span>; i5 &lt;= <span class="number">14</span>; ++i5)</span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> i6 = <span class="number">0</span>; i6 &lt;= <span class="number">14</span>; ++i6)</span><br><span class="line">                                <span class="keyword">for</span> (<span class="type">int</span> i7 = <span class="number">0</span>; i7 &lt;= <span class="number">14</span>; ++i7)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (i1 + i3 + i5 + i7 &gt;= <span class="number">14</span>)</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    <span class="type">int</span> i8 = -i2 - i4 - i6 - <span class="number">1</span> + i1 + i3 + i5 + i7;</span><br><span class="line">                                    <span class="keyword">if</span> (i8 &lt; <span class="number">0</span> || i8 &gt; <span class="number">14</span>)</span><br><span class="line">                                        <span class="keyword">continue</span>;</span><br><span class="line">                                    <span class="keyword">if</span> (i2 + i4 + i6 + i8 &gt;= cardLen)</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j)</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        <span class="type">long</span> <span class="type">double</span> p = (<span class="type">long</span> <span class="type">double</span>)(<span class="number">1.0</span>);</span><br><span class="line">                                        p *= prob[<span class="number">0</span> | (<span class="type">int</span>)(j == <span class="number">0</span>)][i1][i2];</span><br><span class="line">                                        p *= prob[<span class="number">2</span> | (<span class="type">int</span>)(j == <span class="number">1</span>)][i3][i4];</span><br><span class="line">                                        p *= prob[<span class="number">4</span> | (<span class="type">int</span>)(j == <span class="number">2</span>)][i5][i6];</span><br><span class="line">                                        p *= prob[<span class="number">6</span> | (<span class="type">int</span>)(j == <span class="number">3</span>)][i7][i8];</span><br><span class="line">                                        maxP = <span class="built_in">max</span>(p, maxP);  <span class="comment">//所有情况种取最大值</span></span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.16Lf\n&quot;</span>, maxP);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到了胡牌概率估计算法，我们只需要在游戏中枚举打掉的牌，计算打掉之后胡牌概率，最后选择概率最大的牌打掉即可。</p><p>关于吃碰杠，同样也是，计算操作后概率是否会提升，来判断是否要进行操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在上篇文章中，我们简单介绍了一些胡牌算法的实现。现在，我们根据这个实现，编写对应的简单的胡牌机器人。&lt;/p&gt;
&lt;p&gt;关于七对子和碎胡的机器人的编写非常容易，因此本文将着重阐述顺胡的AI算法编写。&lt;/p&gt;
&lt;p&gt;类似胡牌算法，我们依旧将牌分成4个部分：万筒条和字牌。为了简单，</summary>
      
    
    
    
    <category term="算法" scheme="https://blog.yemaster.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="游戏" scheme="https://blog.yemaster.cn/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="麻将" scheme="https://blog.yemaster.cn/tags/%E9%BA%BB%E5%B0%86/"/>
    
  </entry>
  
  <entry>
    <title>冲击麻将胡牌算法</title>
    <link href="https://blog.yemaster.cn/agari-algorithm/"/>
    <id>https://blog.yemaster.cn/agari-algorithm/</id>
    <published>2023-11-25T14:20:59.000Z</published>
    <updated>2023-11-25T15:27:56.405Z</updated>
    
    <content type="html"><![CDATA[<p>冲击麻将是浙江省慈溪、余姚地区特有的麻将玩法。一共有136张牌，分为万牌，筒/饼牌，条/索牌，字牌/风头牌，不包括花牌。</p><p>胡法可以分为以下三类：</p><ul><li><p>碎胡/大乱/十三不搭</p><p>即任意两张同种牌差距大于等于3，并且没有对子。(例如1条4条可以，但是3筒5筒不行)。</p></li><li><p>七对子</p><p>即牌中有7个对子</p></li><li><p>顺胡</p><p>即牌可以分成1个对子，若干个刻子(3张一样的牌)/顺子(3张相连的牌)。</p></li></ul><p>另外，游戏中还加入了“龙/财神/百搭”牌。即该种牌可以代替任何一种牌。</p><p>接下来，分别实现每种胡法的算法。用0—8表示一万—九万，9—17表示一筒—九筒，18—26表示一条—九条，27—33表示东南西北中发白。用一个数组表示手牌，dragon变量表示龙。</p><h3 id="碎胡的胡牌算法"><a class="markdownIt-Anchor" href="#碎胡的胡牌算法"></a> 碎胡的胡牌算法</h3><p>首先统计每张牌的个数，如果有大于1说明有对子，不能胡。然后看万筒条中有没有差小于3的即可。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isAgari</span>(<span class="params">paiArr, dragon</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> cardsCount = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">34</span>; ++i)</span><br><span class="line">        cardsCount.<span class="title function_">push</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; paiArr.<span class="property">length</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (paiArr[i] != dragon) <span class="comment">// 不必统计龙</span></span><br><span class="line">            cardsCount[paiArr[i]]++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> pai = []; <span class="comment">// 给牌排好序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">34</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; cardsCount[i]; ++j)</span><br><span class="line">            pai.<span class="title function_">push</span>(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; pai.<span class="property">length</span>; ++i) &#123; <span class="comment">// 有相邻或间隔为1的万筒条，不能胡</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(pai[i] - pai[i - <span class="number">1</span>]) &lt;= <span class="number">2</span> &amp;&amp;</span><br><span class="line">            <span class="title class_">Math</span>.<span class="title function_">floor</span>(pai[i] / <span class="number">9</span>) == <span class="title class_">Math</span>.<span class="title function_">floor</span>(pai[i - <span class="number">1</span>] / <span class="number">9</span>) &amp;&amp;</span><br><span class="line">            pai[i] &lt; <span class="number">27</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七对子的胡牌算法"><a class="markdownIt-Anchor" href="#七对子的胡牌算法"></a> 七对子的胡牌算法</h3><p>这个更简单，只需要统计对子个数就好了，龙特殊处理一下就好了。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isAgari</span>(<span class="params">paiArr, dragon</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> cardsCount = [], longCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">34</span>; ++i)</span><br><span class="line">        cardsCount.<span class="title function_">push</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; paiArr.<span class="property">length</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (paiArr[i] != dragon) <span class="comment">// 不必统计龙</span></span><br><span class="line">            cardsCount[paiArr[i]]++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            longCount++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> pairCount = <span class="number">0</span>, singleCount = <span class="number">0</span>; <span class="comment">// 分别计算对子数和但张牌个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cardsCount.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">        pairCount += <span class="title class_">Math</span>.<span class="title function_">floor</span>(cardsCount[i] / <span class="number">2</span>);</span><br><span class="line">        singleCount += cardsCount[i] % <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (singleCount &lt;= longCount) <span class="comment">// 龙把单个牌配成对后还有的多，两张龙也能成对</span></span><br><span class="line">        pairCount += singleCount + <span class="title class_">Math</span>.<span class="title function_">floor</span>((longCount - singleCount) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">// 把所有龙都把单张牌配对。</span></span><br><span class="line">        pairCount += longCount;</span><br><span class="line">    <span class="keyword">if</span> (pairCount &gt;= <span class="number">7</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺胡的胡牌算法"><a class="markdownIt-Anchor" href="#顺胡的胡牌算法"></a> 顺胡的胡牌算法</h3><p>如果没有龙，那么这个将是非常简单的。我们只要枚举对子，然后一次判断剩下牌是否为刻字与顺子的组合，只需一个dfs就可以了。但是，有龙的存在，如果我们枚举龙所对应的牌，效率将会非常低下。</p><p>因此，我们考虑换个思路。首先，万、筒、条、字牌是分别独立的。我们只需要分别考虑每一块牌是否可胡就行了。这样就分解成了4个子问题。并且这4个子问题规模不大，而且都有重复性，可以暴力枚举。为了优化时间效率，我们还可以把所有可以胡的牌型处理出来，然后只需要枚举龙的分配和对子的位置即可。</p><p>比如对于牌：<code>[0,0,0,1,2,5,5,5,10,11,12,27,27,27]</code>。那么我们先拆成 <code>[0,0,0,1,2,5,5,5]</code>、<code>[10,11,12]</code>、<code>[]</code>、<code>[27,27,27]</code> 四部分。然后分别判断每个部分是否可胡。不难发现，对子在第一部分的时候就是都可胡的。我们只需要枚举每部分分别在有无对子、有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 条龙的情况下是否可胡即可，而这数据量不大，完全可以先爆搜预处理，然后查表。</p><h4 id="表的生成"><a class="markdownIt-Anchor" href="#表的生成"></a> 表的生成</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cnt[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> q[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array(8)，有对子/无对子+龙0123</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (z &gt;= <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (q[z] &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> flag;</span><br><span class="line">        <span class="keyword">if</span> (z + <span class="number">2</span> &lt;= <span class="number">9</span> &amp;&amp; q[z + <span class="number">1</span>] &gt; <span class="number">0</span> &amp;&amp; q[z + <span class="number">2</span>] &gt; <span class="number">0</span>) <span class="comment">// 可以抽顺子，枚举抽顺子</span></span><br><span class="line">        &#123;</span><br><span class="line">            q[z] -= <span class="number">1</span>;</span><br><span class="line">            q[z + <span class="number">1</span>] -= <span class="number">1</span>;</span><br><span class="line">            q[z + <span class="number">2</span>] -= <span class="number">1</span>;</span><br><span class="line">            flag = <span class="built_in">check</span>(z);</span><br><span class="line">            q[z] += <span class="number">1</span>;</span><br><span class="line">            q[z + <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">            q[z + <span class="number">2</span>] += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (q[z] &gt;= <span class="number">3</span>) <span class="comment">// 可以抽刻字，枚举抽刻字</span></span><br><span class="line">        &#123;</span><br><span class="line">            q[z] -= <span class="number">3</span>;</span><br><span class="line">            flag = <span class="built_in">check</span>(z);</span><br><span class="line">            q[z] += <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">check</span>(z + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check_dz</span><span class="params">(<span class="type">bool</span> dz, <span class="type">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dz)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i) <span class="comment">// 枚举哪张牌作为对子</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (q[i] &lt; <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            q[i] -= <span class="number">2</span>;</span><br><span class="line">            <span class="type">bool</span> flag = <span class="built_in">check</span>(<span class="number">1</span>);</span><br><span class="line">            q[i] += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check_dragon</span><span class="params">(<span class="type">bool</span> dz, <span class="type">int</span> dragon, <span class="type">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dragon + sum &gt; <span class="number">14</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (dragon &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i) <span class="comment">// 枚举龙所对应的牌</span></span><br><span class="line">            <span class="keyword">if</span> (q[i] &lt; <span class="number">4</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q[i] += <span class="number">1</span>;</span><br><span class="line">                <span class="type">bool</span> flag = <span class="built_in">check_dragon</span>(dz, dragon - <span class="number">1</span>, sum);</span><br><span class="line">                q[i] -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (flag)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">check_dz</span>(dz, sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> sum)</span> <span class="comment">// 先枚举出所有牌型。用9个数字表示9种牌的个数。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum)</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + cnt[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j) <span class="comment">// j=0~3表示有对子，j条龙；4~7表示无对子，j-5条龙.</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">                q[i] = cnt[i];</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check_dragon</span>(j &lt;= <span class="number">3</span>, j % <span class="number">4</span>, sum))</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (j &lt; <span class="number">7</span>)</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">        <span class="comment">// exit(0);</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum + i &lt;= <span class="number">14</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt[u] = i;</span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>, sum + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;data.js&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout); <span class="comment">// 输出为js文件，方便js调用。</span></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;h&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;module.exports=&#123;h&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是数字牌的情况，字牌也是类似的。不过我这里为了方便，字牌用了另一种记录方法，记录有4张、3张、2张、1张、0张的字牌分别由几种。因为字牌不能组成顺子，所以只需要判断刻字和对子即可。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> sum, <span class="type">int</span> sum2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &gt; <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tot)</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        tot++;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i)</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + cnt[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + j)</span><br><span class="line">                    <span class="built_in">putchar</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">                <span class="keyword">if</span> (cnt[<span class="number">4</span>] &gt; <span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> need = <span class="number">2</span> * cnt[<span class="number">1</span>] + <span class="number">1</span> * cnt[<span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        need -= <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">if</span> (need &lt; <span class="number">0</span>)</span><br><span class="line">                            need += <span class="number">3</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (need == j || need + <span class="number">3</span> == j)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span> (sum + i * u &lt;= <span class="number">14</span> &amp;&amp; sum2 + i &lt;= <span class="number">7</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cnt[u] = i;</span><br><span class="line">                <span class="built_in">dfs</span>(u + <span class="number">1</span>, sum + i * u, sum2 + i);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="胡牌检验"><a class="markdownIt-Anchor" href="#胡牌检验"></a> 胡牌检验</h4><p>有了上面两个文件生成的数据，然后就可以判断了。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> distributeLong = [[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]],</span><br><span class="line">[[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]],</span><br><span class="line">[[<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]],</span><br><span class="line">[[<span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]]]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isAgari</span>(<span class="params">paiArr, dragon</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> cardsCount = [], longCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">34</span>; ++i)</span><br><span class="line">        cardsCount.<span class="title function_">push</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; paiArr.<span class="property">length</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (paiArr[i] != dragon) <span class="comment">// 不必统计龙</span></span><br><span class="line">            cardsCount[paiArr[i]]++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            longCount++;</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">let</span> paiStr = [<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>] <span class="comment">// 计算四部分的牌型</span></span><br><span class="line">    <span class="keyword">let</span> fengCount = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j)</span><br><span class="line">            paiStr[i] += cardsCount[i * <span class="number">9</span> + j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">27</span>; i &lt; <span class="number">34</span>; ++i) &#123;</span><br><span class="line">        fengCount[cardsCount[i]]++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i)</span><br><span class="line">        paiStr[<span class="number">3</span>] += fengCount[i]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j <span class="keyword">in</span> distributeLong[longCount]) &#123; <span class="comment">// 枚举4个部分龙的个数</span></span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123; <span class="comment">// k枚举对子的位置</span></span><br><span class="line">                    <span class="keyword">if</span> (k &lt;= <span class="number">2</span> &amp;&amp; !h[paiStr[k]][(i != k) * <span class="number">4</span> + distributeLong[longCount][j][k]]) &#123;</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (k == <span class="number">3</span> &amp;&amp; !p[paiStr[k]][(i != k) * <span class="number">4</span> + distributeLong[longCount][j][k]]) &#123;</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                flag = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;冲击麻将是浙江省慈溪、余姚地区特有的麻将玩法。一共有136张牌，分为万牌，筒/饼牌，条/索牌，字牌/风头牌，不包括花牌。&lt;/p&gt;
&lt;p&gt;胡法可以分为以下三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;碎胡/大乱/十三不搭&lt;/p&gt;
&lt;p&gt;即任意两张同种牌差距大于等于3，并且没有对子</summary>
      
    
    
    
    <category term="算法" scheme="https://blog.yemaster.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="游戏" scheme="https://blog.yemaster.cn/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="麻将" scheme="https://blog.yemaster.cn/tags/%E9%BA%BB%E5%B0%86/"/>
    
  </entry>
  
  <entry>
    <title>Miller Rabin算法</title>
    <link href="https://blog.yemaster.cn/miller-rabin/"/>
    <id>https://blog.yemaster.cn/miller-rabin/</id>
    <published>2023-11-11T11:13:36.000Z</published>
    <updated>2023-11-12T01:26:32.121Z</updated>
    
    <content type="html"><![CDATA[<h3 id="费马素性检验"><a class="markdownIt-Anchor" href="#费马素性检验"></a> 费马素性检验</h3><p>由费马小定理，如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span> 为质数并且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">,</mo><mi>p</mi><mo fence="true">)</mo></mrow><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\left(a,p\right)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>≡</mo><mn>1</mn><mrow><mo fence="true">(</mo><mtext>mod </mtext><mi>p</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">a^{p-1}\equiv 1 \left(\text{mod}\ p\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord text"><span class="mord">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>。那么，如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>≢</mo><mn>1</mn><mrow><mo fence="true">(</mo><mtext>mod </mtext><mi>p</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">a^{p-1}\not\equiv 1 \left(\text{mod}\ p\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord text"><span class="mord">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span> 就一定不是素数。因此，我们只要多试几个数，如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>≡</mo><mn>1</mn><mrow><mo fence="true">(</mo><mtext>mod </mtext><mi>p</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">a^{p-1}\equiv 1 \left(\text{mod}\ p\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord text"><span class="mord">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span> 都成立，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span> 大概率就是素数。</p><p>但仍旧存在极少的一些合数，即便遍历 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mn>2</mn><mo separator="true">,</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[2,p-1\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span> 的每一个数字作为底数，也无法筛去。这样的合数被称为卡迈克尔数，在一亿内有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>255</mn></mrow><annotation encoding="application/x-tex">255</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">5</span></span></span></span> 个，最小的卡迈克尔数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>561</mn></mrow><annotation encoding="application/x-tex">561</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">6</span><span class="mord">1</span></span></span></span>。若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 为卡迈克尔数，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 也是卡迈克尔数，故其个数是无穷的。</p><p>因此，我们要考虑其他的方法。</p><h3 id="二次探测"><a class="markdownIt-Anchor" href="#二次探测"></a> 二次探测</h3><p>如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span> 为质数，那么方程 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>≡</mo><mn>1</mn><mrow><mo fence="true">(</mo><mtext>mod</mtext><mi>p</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">x^2\equiv 1\left(\text{mod} p\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord text"><span class="mord">mod</span></span><span class="mord mathnormal">p</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span> 只有 2 个解(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mi>p</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x_1=1,x_2=p-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>)。</p><p>证明：因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span> 为质数，又 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p|(x-1)(x+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mord">∣</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p|x-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p|x+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi>p</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x=p-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</p><p>这样子，事先判定掉偶数的情况。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span> 为奇数时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mrow><mo fence="true">(</mo><msup><mi>a</mi><mfrac><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></msup><mo fence="true">)</mo></mrow><mn>2</mn></msup><mo>≡</mo><mn>1</mn><mrow><mo fence="true">(</mo><mtext>mod</mtext><mi>p</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">a^{p-1}=\left(a^\frac{p-1}{2}\right)^2\equiv 1\left(\text{mod} p\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.004028em;vertical-align:-0.65002em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.00889em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9227em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.4623857142857144em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.3540079999999999em;"><span style="top:-3.6029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord text"><span class="mord">mod</span></span><span class="mord mathnormal">p</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>。因此，我们可以通过判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mfrac><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></msup></mrow><annotation encoding="application/x-tex">a^\frac{p-1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00889em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.00889em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9227em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.4623857142857144em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span> 是否是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 中的一个来判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span> 是否为质数。同样的，这只是必要条件。我们可以通过多次判断来降低错误概率。</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><h4 id="c代码"><a class="markdownIt-Anchor" href="#c代码"></a> C++代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI register int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> prime[<span class="number">21</span>]= &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">79</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Quick_Multiply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>, res = a;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            ans = (ans + res) % c;</span><br><span class="line">        res = (res + res) % c;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Quick_Power</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans= <span class="number">1</span>, res = a;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)</span><br><span class="line">            ans = <span class="built_in">Quick_Multiply</span>(ans, res, c);</span><br><span class="line">        res = <span class="built_in">Quick_Multiply</span>(res, res, c);</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Miller_Rabin</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>, t = x - <span class="number">1</span>, k;</span><br><span class="line">    <span class="keyword">if</span> (x==<span class="number">2</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">2</span> || !(x &amp; <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(t &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">        s++;</span><br><span class="line">        t &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(RI i = <span class="number">0</span>; i &lt; <span class="number">1</span> &amp;&amp; prime[i] &lt; x; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> a = prime[i];</span><br><span class="line">        <span class="type">int</span> b = <span class="built_in">Quick_Power</span>(a, t, x);</span><br><span class="line">        <span class="keyword">for</span>(RI j = <span class="number">1</span>; j &lt;= s; ++j) &#123;</span><br><span class="line">            k = <span class="built_in">Quick_Multiply</span>(b, b, x);</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">1</span> &amp;&amp; b != <span class="number">1</span> &amp;&amp; b != x - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            b = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(b != <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Miller_Rabin</span>(x)) </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;费马素性检验&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#费马素性检验&quot;&gt;&lt;/a&gt; 费马素性检验&lt;/h3&gt;
&lt;p&gt;由费马小定理，如果 &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;ma</summary>
      
    
    
    
    <category term="算法" scheme="https://blog.yemaster.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数论" scheme="https://blog.yemaster.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="素数" scheme="https://blog.yemaster.cn/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
</feed>
